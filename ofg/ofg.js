document.addEventListener('DOMContentLoaded', function() {
  // --- –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ---
  const homeworkContent = document.getElementById('homework-content');
  const editSection = document.getElementById('edit-section');
  const homeworkText = document.getElementById('homework-text');
  const fileInput = document.getElementById('file-input');
  const filePreview = document.getElementById('file-preview');
  const editBtn = document.getElementById('edit-btn');
  const applyBtn = document.getElementById('apply-btn');
  const cancelBtn = document.getElementById('cancel-btn');
  const errorElement = document.getElementById('error');

  let currentHomework = null;
  let selectedFiles = [];

  const API_BASE_URL = 'https://backend-production-cf98.up.railway.app/api'; // –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞

  // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ ---
  async function loadHomework() {
    try {
      const response = await fetch(`${API_BASE_URL}/homework/ofg`);
      if (response.status === 404) {
        homeworkContent.innerHTML = '<p class="no-homework">–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ</p>';
        return;
      }
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
      currentHomework = await response.json();
      selectedFiles = currentHomework.files || [];
      displayHomework();
    } catch (error) {
      console.error('Error loading homework:', error);
      errorElement.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
    }
  }

  // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –î–ó ---
  function displayHomework() {
    if (!currentHomework) {
      homeworkContent.innerHTML = '<p class="no-homework">–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ</p>';
      return;
    }
    let content = '';
    if (currentHomework.text) {
      content += `<p>${currentHomework.text}</p>`;
    }
    if (currentHomework.files && currentHomework.files.length > 0) {
      content += '<div class="files-container">';
      currentHomework.files.forEach(file => {
        if (file.type.startsWith('image/')) {
          content += `
            <div class="file-item">
              <img src="${file.url}" alt="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ" class="homework-image">
              <span class="file-name">${file.name}</span>
            </div>
          `;
        } else {
          content += `
            <div class="file-item">
              <a href="${file.url}" target="_blank" class="homework-file">
                üìÑ ${file.name}
              </a>
            </div>
          `;
        }
      });
      content += '</div>';
    }
    content += `<p class="update-time">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${currentHomework.updated_at}</p>`;
    homeworkContent.innerHTML = content;
  }

  // --- –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
  editBtn.addEventListener('click', function() {
    editSection.style.display = 'block';
    editBtn.style.display = 'none';
    applyBtn.style.display = 'inline-block';
    cancelBtn.style.display = 'inline-block';
    if (currentHomework) {
      homeworkText.value = currentHomework.text || '';
      selectedFiles = currentHomework.files || [];
      updateFilePreview();
    }
  });

  // --- –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
  cancelBtn.addEventListener('click', function() {
    editSection.style.display = 'none';
    editBtn.style.display = 'inline-block';
    applyBtn.style.display = 'none';
    cancelBtn.style.display = 'none';
    homeworkText.value = '';
    selectedFiles = [];
    filePreview.innerHTML = '';
    errorElement.textContent = '';
  });

  // --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
  applyBtn.addEventListener('click', async function() {
    const text = homeworkText.value.trim();
    if (!text && selectedFiles.length === 0) {
      errorElement.textContent = '–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è';
      return;
    }
    errorElement.textContent = '';
    const homeworkData = {
      text: text,
      files: selectedFiles,
      updated_at: new Date().toISOString()
    };
    try {
      const response = await fetch(`${API_BASE_URL}/homework/ofg`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(homeworkData)
      });
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      }
      currentHomework = homeworkData;
      displayHomework();
      cancelBtn.click();
    } catch (error) {
      console.error('Error saving homework:', error);
      errorElement.textContent = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }
  });

  // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
  fileInput.addEventListener('change', function(e) {
    const files = Array.from(e.target.files);
    files.forEach(file => {
      const reader = new FileReader();
      reader.onload = function(e) {
        const fileData = {
          name: file.name,
          type: file.type,
          url: e.target.result
        };
        selectedFiles.push(fileData);
        updateFilePreview();
      };
      reader.readAsDataURL(file);
    });
  });

  // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤ ---
  function updateFilePreview() {
    filePreview.innerHTML = '';
    selectedFiles.forEach((file, index) => {
      const fileItem = document.createElement('div');
      fileItem.className = 'file-item-preview';
      if (file.type.startsWith('image/')) {
        fileItem.innerHTML = `
          <div class="file-preview-content">
            <span class="file-emoji">üñºÔ∏è</span>
            <span class="file-name">${file.name}</span>
            <button class="remove-btn" onclick="removeFile(${index})">√ó</button>
          </div>
        `;
      } else {
        fileItem.innerHTML = `
          <div class="file-preview-content">
            <span class="file-emoji">üìÑ</span>
            <span class="file-name">${file.name}</span>
            <button class="remove-btn" onclick="removeFile(${index})">√ó</button>
          </div>
        `;
      }
      filePreview.appendChild(fileItem);
    });
  }

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º ---
  const subjectLinks = {
    'button-cp': '../CP/CP.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ö–ü
    'button-it': '../IT/IT.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ò–¢
    'button-engl113': '../engl113/engl113.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ê–Ω–≥–ª. 113
    'button-engl208': '../engl208/engl208.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ê–Ω–≥–ª. 208
    'button-math': '../math/math.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
    'button-oap': '../oap/oap.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –û–ê–ü
    'button-oss': '../oss/oss.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –û–°–°
    'button-ofg': '../ofg/ofg.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –û–§–ì
    'button-bjd': '../bjd/bjd.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ë–ñ–î
    'button-op1c': '../op1c/op1c.html', // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –û–ü 1C
    'button-cg': '../CG/CG.html'
  };
  Object.keys(subjectLinks).forEach(function(id) {
    const el = document.getElementById(id);
    if (el) {
      el.style.cursor = 'pointer';
      el.addEventListener('click', function() {
        const link = subjectLinks[id];
        if (link) {
          window.location.href = link;
        } else {
          alert('–°—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
        }
      });
    }
  });

  // --- –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ---
  window.removeFile = function(index) {
    selectedFiles.splice(index, 1);
    updateFilePreview();
  };

  // --- –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
  loadHomework();
});